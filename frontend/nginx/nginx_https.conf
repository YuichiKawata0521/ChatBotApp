# docker compose logsでデバッグのエラーログを出力
error_log /dev/stderr debug;

# localhostからのHTTPリクエストをHTTPSにリダイレクトするサーバーブロック
server {
    listen 80; # 80番でHTTPリクエストを受け付け
    server_name localhost; # Hostヘッダーがlocalhostの時だけ対応
    return 301 https://$host$request_uri; # HTTPSへリダイレクト
}

# HTTPSリクエストを処理するブロック
server {
    listen 443 ssl; # 443番でHTTPSリクエストを受け付け
    server_name localhost;

    access_log /dev/stdout; # エラーと違い詳細不要の為、debugは不要

    # ----------------------------------------------------
    # SSL証明書の設定
    # ----------------------------------------------------

    ## HTTPS通信のための証明書と秘密鍵の設定
    ssl_certificate /etc/nginx/certs/server.crt; # SSL証明書のファイルパス
    ssl_certificate_key /etc/nginx/certs/server.key; # 秘密鍵のファイルパス

    ## TSLバージョンを制限し、安全なプロトコルのみ使用
    ssl_protocols TLSv1.2 TLSv1.3;

    ## 暗号スイートの設定
    # 使用する暗号スイートは強力なデータの暗号化方法と認証(秘密鍵交換)方法(HIGH)のみ許可
    # aNULL(認証無し)とMD5(脆弱なハッシュ)は除外して安全性を確保
    ssl_ciphers HIGH:!aNULL:!MD5;

    ## サーバー側での暗号スイートを優先
    ssl_prefer_server_ciphers on;

    # ----------------------------------------------------
    # セキュリティヘッダー
    # ----------------------------------------------------

    ## ブラウザがレスポンスのMIMEタイプを勝手に推測することを拒否し、指定のContent-Typeを使用して処理させる
    add_header X-Content-Type-Options nosniff; # XSS対策

    ## iframeの埋め込みを完全に禁止
    add_header X-Frame-Options DENY; # クリックジャッキング対策

    ## 古いブラウザでXSS攻撃が検知された場合、ページのレンダリングをブロック
    add_header X-XSS-Protection "1; mode=block";

    ## 直前ページのURL(Refferヘッダー)を送信するかの設定
    add_header Reffer-Policy "no-reffer-when-downgrade"; # 遷移先がHTTPなら送らない(情報漏洩対策)

    ## Webページで読み込めるリソースの制限
    add_header Content-Security-Policy "default-src 'self'; style-src 'self'; script-src 'self' https://cdn.jsdelivr.net; connect-src 'self' http://backend:3000;" always;

    # HTTPをHTTPSへ強制リダイレクトさせる機能の有効化
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"; 

    # ----------------------------------------------------
    # カスタムエラーページの設定
    # ----------------------------------------------------
    error_page 404 /error/404.html;
    error_page 500 502 503 504 /error/50x.html;

    # ----------------------------------------------------
    # ロケーションブロック
    # ----------------------------------------------------

    # ルートアクセス時のルーティング
    location = / {
        return 302 /user/;
    }

    # メイン画面(user)を配信
    location /user/ {
        alias /usr/share/nginx/html/user/;
        index index.html;
        try_files $uri $uri/ /user/index.html;
    }

    # 管理画面(admin)を配信
    location /admin/ {
        alias /usr/share/nginx/html/admin/;
        index index.html;
        try_files $uri $uri/ /admin/index.html;
    }

    # ログイン画面(auth)を配信
    location /auth/ {
        alias /usr/share/nginx/html/auth/;
        index login.html;
        try_files $uri $uri/ /auth/login.html;
    }

    # エラー画面(error)を配信
    location /error/ {
        alias /usr/share/nginx/html/error/;
        internal; # 外部アクセス不可。内部リダイレクトのみ許可
    }

    # アイコン(icons)を配信
    location /icons/ {
        alias /usr/share/nginx/html/icons/;
        expires 1d; # キャッシュ:1日
        access_log off;
    }

    # favicon.icoの配信
    location /favicon.ico {
        alias /usr/share/nginx/html/favicon.ico;
        log_not_found off; # ログに404を出力させない
        expires 1d; # キャッシュ:1日
        access_log off;
    }

    # utilsの配信
    location /utils/ {
        alias /usr/share/nginx/html/utils/;
        expires 1d;
        access_log off;
    }

    # assets(css, js)を配信するロケーションブロック
    location /assets/ {
        alias /usr/share/nginx/html/assets/;
        expires 1d; # キャッシュを1日間有効にする
        access_log off; # アクセスログを記録しない
    }

    # ----------------------------------------------------
    # APIリバースプロキシ設定
    # ----------------------------------------------------

    # api/v1/ で始まるURLリクエストをキャッチ
    location /api/v1/ {
        proxy_pass http://backend:3000/api/v1/; # リクエスト送信先(プレフィックス保持)
        proxy_http_version 1.1;

        ## ヘッダー情報
        proxy_set_header Host $host; # 元のリクエストヘッダーのHostをそのままバックエンドに送る
        proxy_set_header X-Real-IP $remote_addr; # 本来のリモートアドレスをバックエンドに送る
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # リバースプロキシを通過した履歴をバックエンドに送る
        proxy_set_header X-Forwarded-Proto $scheme; # クライアントがHTTP or HTTPSかをバックエンドに送る

        # プロキシをタイムアウト設定
        proxy_connect_timeout 60s; # バックエンドへの接続タイムアウト
        proxy_send_timeout 60s; # バックエンドへのデータ送信タイムアウト
        proxy_read_timeout 60s; # 応答読み込みタイムアウト

        proxy_buffering off; # レスポンスをバッファリングせずに転送(ストリーミング表示では必要)
        proxy_set_header Connection ""; # Connectionヘッダーをクリア(Connection:close(接続切断)が送られてきても空にして接続維持)
    }
}